data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
anim <- map +
transition_time(start_year)
animate(anim, fps = 20, width = 1024, height = 951, nframes = 640, end_pause = 40)
anim_save("eruptions.gif")
?anim_save
?anim_save
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
eruption_list <- eruptions %>%
janitor::clean_names() %>%
select(-contains("modifier"), -contains("uncertainty")) %>%
filter(eruption_category == "Confirmed Eruption") %>%
drop_na(end_year) +
filter(end_year > 2010)
View(eruption_list)
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
eruption_list <- eruptions %>%
janitor::clean_names() %>%
select(-contains("modifier"), -contains("uncertainty")) %>%
filter(eruption_category == "Confirmed Eruption") %>%
drop_na(end_year) %>%
filter(end_year > 2010)
datatable(eruption_list, rownames = FALSE,
options = list(pageLength = 5))
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
map
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
anim <- map +
transition_time(start_year)
anim
animate(anim)
animate(anim,
nframes = 312,
renderer = gifski_renderer("volcanos.gif"),
duration = 14)
install.packages('gifski_renderer')
install.packages("gifski")
library(readxl)
library(tidyverse)
library(ggplot2)
library(gganimate)
library(maps)
library(ggthemes)
library(DT)
library(gifski)
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
eruption_list <- eruptions %>%
janitor::clean_names() %>%
select(-contains("modifier"), -contains("uncertainty")) %>%
filter(eruption_category == "Confirmed Eruption") %>%
drop_na(end_year) %>%
filter(end_year > 2010)
datatable(eruption_list, rownames = FALSE,
options = list(pageLength = 5))
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
map
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
anim <- map +
transition_time(start_year)
animate(anim,
nframes = 312,
renderer = gifski_renderer("volcanos.gif"),
duration = 14)
#animate(anim, fps = 20, width = 1024, height = 951, nframes = 640, end_pause = 40)
View(eruption_list)
eruption_list %>% count(end_year)
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
anim <- map +
transition_time(start_year)
animate(anim,
nframes = 10,
renderer = gifski_renderer("volcanos.gif"),
duration = 14)
#animate(anim, fps = 20, width = 1024, height = 951, nframes = 640, end_pause = 40)
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
anim <- map +
transition_time(start_year)
animate(anim,
renderer = gifski_renderer("volcanos.gif"),
duration = 14)
#animate(anim, fps = 20, width = 1024, height = 951, nframes = 640, end_pause = 40)
ease_aes()
ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_time(start_year) +
ease_aes("linear")
anim_save("volcano2.gif")
anim_save("volcano2.gif",animation = last_animation())
anim_save(volcano2.gif)
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_time(start_year) +
ease_aes("linear")
animate(animate2, renderer = gifski_renderer("volcanos2.gif"))
<img src="volcanos2.gif" alt="animation"/>
install.packages('gganimate')
install.packages("gganimate")
install.packages("gganimate")
install.packages("gganimate")
#this gets rid most of the outputs that are not necessary for making the mapping
knitr::opts_chunk$set(echo = T,
results = "hide",
error=FALSE,
warning=FALSE,
message=FALSE)
library(readxl)
library(tidyverse)
library(ggplot2)
library(gganimate)
devtools::install_github('thomasp85/gganimate')
library(readxl)
library(tidyverse)
library(ggplot2)
library(gganimate)
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
#this gets rid most of the outputs that are not necessary for making the mapping
knitr::opts_chunk$set(echo = T,
results = "hide",
error=FALSE,
warning=FALSE,
message=FALSE)
library(readxl)
library(tidyverse)
library(ggplot2)
library(gganimate)
library(maps)
library(ggthemes)
library(DT)
library(gifski)
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
eruption_list <- eruptions %>%
janitor::clean_names() %>%
select(-contains("modifier"), -contains("uncertainty")) %>%
filter(eruption_category == "Confirmed Eruption") %>%
drop_na(end_year) %>%
filter(end_year > 2010)
datatable(eruption_list, rownames = FALSE,
options = list(pageLength = 5))
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
map
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate2
?ease_aes
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_states(end_year, transition_length = 2, state_length = 1) +
ease_aes("linear")
animate2
animate(animate2)
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_states(end_year, transition_length = 2, state_length = 1) +
ease_aes("linear")
animate(animate2)
View(animate2)
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_states(end_year, transition_length = 2) +
ease_aes("linear")
View(animate2)
animate(animate2)
animate2
View(eruption_list)
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_states(states = end_year, transition_length = 2) +
ease_aes("linear")
animate2
warnings()
animate2 <- ggplot(eruption_list, aes(x = longitude, y = latitude)) +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() + geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_states(states = end_year, transition_length = 2) +
ease_aes("linear")
animate2
animate2 <- ggplot(eruption_list, aes(x = longitude, y = latitude)) +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_states(states = end_year, transition_length = 2) +
ease_aes("linear")
animate(animate2, renderer = gifski_renderer("volcanos2.gif"))
library(readxl)
library(tidyverse)
library(ggplot2)
library(gganimate)
library(maps)
library(ggthemes)
library(DT)
library(gifski)
?transition_time()
animate2 <- ggplot(eruption_list, aes(x = longitude, y = latitude)) +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
colour = 'purple', alpha = .5) +
labs(title = "Date: {end_year}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate(animate2, renderer = gifski_renderer("volcanos2.gif"))
animate2 <- ggplot(eruption_list, aes(x = longitude, y = latitude)) +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
colour = 'purple', alpha = .5) +
labs(title = "Date: {end_year}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate2
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 7)) +
labs(size = 'Volcanic Explosivity Index')
map
animate2 <- ggplot(eruption_list) +
geom_point(aes(x = longitude, y = latitude, size = vei),
colour = 'purple', alpha = .5) +
labs(title = "Date: {end_year}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate2
View(animate2)
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate2
animate2 <- ggplot() +
borders("world", colour = "gray90", fill = "gray85") +
theme_map() +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {end_year}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate2
animate2 <- world +
geom_point(aes(x = longitude, y = latitude, size = vei),
data = eruption_list,
colour = 'purple', alpha = .5) +
labs(title = "Date: {frame_time}", size = "Volcanic Index") +
transition_time(end_year) +
ease_aes("linear")
animate(animate2, renderer = gifski_renderer("v.gif"))
blogdown:::new_post_addin()
knit_with_parameters('~/Documents/website/content/post/2020-06-08-test-post.Rmd')
blogdown::serve_site()
blogdown:::serve_site()
install.packages("usethis")
usethis::edit_r_profile(scope = "project")
knitr::include_graphics("images/Crew16.jpg")
knitr::include_graphics("img/Crew16.jpg")
knitr::include_graphics("static/img/Crew16.jpg")
knitr::include_graphics("/static/img/Crew16.jpg")
library(tidyverse)
library(maps)
library(viridis)
library(grid)
#Modes of travling biking and walking ACS data
commute_mode <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-11-05/commute.csv")
commute_mode$state <- recode(commute_mode$state,
"Ca"= "California",
"Massachusett" = "Massachusetts")
#summarise data each state for percent biking and walking
commute_summary <- commute_mode %>%
mutate(state = tolower(state)) %>%
group_by(state, mode) %>%
summarise(Percent = mean(percent))
#retrieve state geo data
states_map <- map_data("state")
#filter by Northeastern States
NE_states <- subset(states_map, region %in% c("connecticut", "massachusetts","maine", "new hampshire",
"new york", "rhode island", "vermont"))
#plot by new england states
commute_summary %>%
ggplot(aes(map_id = state)) +
geom_map(aes(fill=Percent), map = NE_states)+ #sets up map
facet_wrap(vars(mode)) + #displays both bike and walk on same figure
expand_limits(x= NE_states$long, y=NE_states$lat)+ #sets limits based on lat/long of states file
coord_map("polyconic") +
scale_fill_viridis(option = "D") +
theme_void()+ #gets rid of xy grid
labs(fill = "Percent of commuters", title= "The Northeast Loves Walking")+
theme(legend.position="bottom", plot.title = element_text(hjust =0.5),
strip.text.x = element_text(size = 12))#changes text of mode
library(tidyverse)
library(maps)
library(viridis)
library(grid)
#Modes of travling biking and walking ACS data
commute_mode <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-11-05/commute.csv")
commute_mode$state <- recode(commute_mode$state,
"Ca"= "California",
"Massachusett" = "Massachusetts")
#summarise data each state for percent biking and walking
commute_summary <- commute_mode %>%
mutate(state = tolower(state)) %>%
group_by(state, mode) %>%
summarise(Percent = mean(percent))
#retrieve state geo data
states_map <- map_data("state")
#filter by Northeastern States
NE_states <- subset(states_map, region %in% c("connecticut", "massachusetts","maine", "new hampshire",
"new york", "rhode island", "vermont"))
#plot by new england states
commute_summary %>%
ggplot(aes(map_id = state)) +
geom_map(aes(fill=Percent), map = NE_states)+ #sets up map
facet_wrap(vars(mode)) + #displays both bike and walk on same figure
expand_limits(x= NE_states$long, y=NE_states$lat)+ #sets limits based on lat/long of states file
coord_map("polyconic") +
scale_fill_viridis(option = "D") +
theme_void()+ #gets rid of xy grid
labs(fill = "Percent of commuters", title= "The Northeast Loves Walking")+
theme(legend.position="bottom", plot.title = element_text(hjust =0.5),
strip.text.x = element_text(size = 12))#changes text of mode
library(tidyverse)
library(maps)
library(viridis)
library(grid)
library(ggplot2)
#Modes of travling biking and walking ACS data
commute_mode <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-11-05/commute.csv")
commute_mode$state <- recode(commute_mode$state,
"Ca"= "California",
"Massachusett" = "Massachusetts")
#summarise data each state for percent biking and walking
commute_summary <- commute_mode %>%
mutate(state = tolower(state)) %>%
group_by(state, mode) %>%
summarise(Percent = mean(percent))
#retrieve state geo data
states_map <- map_data("state")
#filter by Northeastern States
NE_states <- subset(states_map, region %in% c("connecticut", "massachusetts","maine", "new hampshire",
"new york", "rhode island", "vermont"))
#plot by new england states
commute_summary %>%
ggplot(aes(map_id = state)) +
geom_map(aes(fill=Percent), map = NE_states)+ #sets up map
facet_wrap(vars(mode)) + #displays both bike and walk on same figure
expand_limits(x= NE_states$long, y=NE_states$lat)+ #sets limits based on lat/long of states file
coord_map("polyconic") +
scale_fill_viridis(option = "D") +
theme_void()+ #gets rid of xy grid
labs(fill = "Percent of commuters", title= "The Northeast Loves Walking")+
theme(legend.position="bottom", plot.title = element_text(hjust =0.5),
strip.text.x = element_text(size = 12))#changes text of mode
install.packages("mapproj")
library(tidyverse)
library(maps)
library(viridis)
library(grid)
library(ggplot2)
library(mapproj)
#Modes of travling biking and walking ACS data
commute_mode <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-11-05/commute.csv")
commute_mode$state <- recode(commute_mode$state,
"Ca"= "California",
"Massachusett" = "Massachusetts")
#summarise data each state for percent biking and walking
commute_summary <- commute_mode %>%
mutate(state = tolower(state)) %>%
group_by(state, mode) %>%
summarise(Percent = mean(percent))
#retrieve state geo data
states_map <- map_data("state")
#filter by Northeastern States
NE_states <- subset(states_map, region %in% c("connecticut", "massachusetts","maine", "new hampshire",
"new york", "rhode island", "vermont"))
#plot by new england states
commute_summary %>%
ggplot(aes(map_id = state)) +
geom_map(aes(fill=Percent), map = NE_states)+ #sets up map
facet_wrap(vars(mode)) + #displays both bike and walk on same figure
expand_limits(x= NE_states$long, y=NE_states$lat)+ #sets limits based on lat/long of states file
coord_map("polyconic") +
scale_fill_viridis(option = "D") +
theme_void()+ #gets rid of xy grid
labs(fill = "Percent of commuters", title= "The Northeast Loves Walking")+
theme(legend.position="bottom", plot.title = element_text(hjust =0.5),
strip.text.x = element_text(size = 12))#changes text of mode
commute_summary
knitr::include_graphics("/img/Crew16.jpg")
if (file.exists("~/.Rprofile")) {
base::sys.source("~/.Rprofile", envir = environment())
}
options(
servr.daemon = TRUE,
blogdown.author = "YOUR NAME",
blogdown.ext = ".Rmd",
blogdown.subdir = "post",
blogdown.yaml.empty = TRUE,
blogdown.new_bundle = TRUE,
blogdown.title_case = TRUE
)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown::new_post("another test", ext=getOption("blogdown.ext", ".rmd")))
blogdown::new_post("another test", ext=getOption("blogdown.ext", ".rmd"))
